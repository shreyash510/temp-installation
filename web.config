Skip to content
Search or jump to…
Pull requests
Issues
Codespaces
Marketplace
Explore
 
@shreyash510 
projectkudu
/
kudu
Public
Code
Issues
629
Pull requests
21
Actions
Projects
Wiki
Security
Insights
Using a custom web.config for Node apps
davidebbo edited this page on Nov 1, 2014 · 1 revision
 Pages 93
Find a page…
Home
Accessing files via ftp
Accessing the kudu service
Admin site
Analyzing a git client trace
Anatomy of a git request
App Service Editor
ARMTemplate: RunFromPackage sample
Azure runtime environment
Azure Site Extensions
Azure Web App sandbox
Azure Web Sites Development Stacks
Best X509Certificate2 Practices
Blog posts and screencasts
Configurable settings
Clone this wiki locally
https://github.com/projectkudu/kudu.wiki.git
When deploying a Node app via git, Kudu automatically generates a web.config file which sets up everything for iisnode.

If you ever need to use a custom web.config, you can start with what would normally be generated. The content below assumes that your start file is called server.js, so you may need to adjust that if you have a different file (you'll need to change it in 3 places).

<?xml version="1.0" encoding="utf-8"?>
<!--
     This configuration file is required if iisnode is used to run node processes behind
     IIS or IIS Express.  For more information, visit:

     https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config
-->

<configuration>
  <system.webServer>
    <!-- Visit http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx for more information on WebSocket support -->
    <webSocket enabled="false" />
    <handlers>
      <!-- Indicates that the server.js file is a node.js site to be handled by the iisnode module -->
      <add name="iisnode" path="main.js" verb="*" modules="iisnode"/>
    </handlers>
    <rewrite>
      <rules>
        <!-- Do not interfere with requests for node-inspector debugging -->
        <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
          <match url="^main.js\/debug[\/]?" />
        </rule>

        <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->
        <rule name="StaticContent">
          <action type="Rewrite" url="public{REQUEST_URI}"/>
        </rule>

        <!-- All other URLs are mapped to the node.js site entry point -->
        <rule name="DynamicContent">
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
          </conditions>
          <action type="Rewrite" url="main.js"/>
        </rule>
      </rules>
    </rewrite>
    
    <!-- 'bin' directory has no special meaning in node.js and apps can be placed in it -->
    <security>
      <requestFiltering>
        <hiddenSegments>
          <remove segment="bin"/>
        </hiddenSegments>
      </requestFiltering>
    </security>

    <!-- Make sure error responses are left untouched -->
    <httpErrors existingResponse="PassThrough" />

    <!--
      You can control how Node is hosted within IIS using the following options:
        * watchedFiles: semi-colon separated list of files that will be watched for changes to restart the server
        * node_env: will be propagated to node as NODE_ENV environment variable
        * debuggingEnabled - controls whether the built-in debugger is enabled

      See https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config for a full list of options
    -->
    <!--<iisnode watchedFiles="web.config;*.js"/>-->
  </system.webServer>
</configuration>

